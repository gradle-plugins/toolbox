plugins {
    id 'toolboxbuild.java-library'
    id 'groovy-base'
    id 'java-test-fixtures'
    id 'toolboxbuild.publish'
    id 'toolboxbuild.functional-test-repository'
}

description = 'Gradle runner kit implementation.'

repositories {
    gradlePluginDevelopment()
    maven { url = 'https://repo.nokee.dev/snapshot' }
}

// Caveman dependency shading
def shadedConfiguration = configurations.create('shaded') { transitive = false }
configurations.compileOnly.extendsFrom(shadedConfiguration)
configurations.testImplementation.extendsFrom(shadedConfiguration)
tasks.named('jar', Jar) { task ->
    task.from({ shadedConfiguration.files.collect { zipTree(it) } })
}


dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    //region Until we release coreExec as part of Grava
    shaded "dev.nokee:coreExec:${nokeeCoreExecVersion}"
    shaded "dev.nokee:coreUtils:${nokeeCoreExecVersion}"
    def commonsExecVersion = '1.3'
    def guavaVersion = '28.2-jre'
    def commonsLangVersion = '3.9'
    def commonsIoVersion = '2.6'
    implementation "org.apache.commons:commons-exec:${commonsExecVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "commons-io:commons-io:${commonsIoVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    //endregion

    implementation project(':gradle-runner-kit-api')
    implementation project(':gradle-fixtures-file-system')
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'commons-io:commons-io:2.6'
    compileOnly gradleApi(minimumGradleVersion)

    testImplementation platform('org.spockframework:spock-bom:1.2-groovy-2.5')
    testImplementation 'org.spockframework:spock-core'
    testImplementation gradleTestKit(gradle.gradleVersion)
    testImplementation testFixtures(project(':gradle-fixtures-file-system'))
    testImplementation 'org.apache.commons:commons-lang3:3.9'
    testImplementation testFixtures(project(':gradle-runner-kit'))
    testImplementation 'dev.nokee:coreExec:0.5.0-5eeb42cb'
}

def generatePluginUnderTestMetadataUnderTestTask = tasks.register('generatePluginUnderTestMetadataUnderTest') { task ->
    ext.outputFile = layout.buildDirectory.file('plugin-under-test-metadata.properties')
    task.outputs.file(ext.outputFile)
    task.doLast {
        ext.outputFile.get().asFile << "implementation-classpath = ${files('build/classes/java/main', 'foo.jar', 'bar.jar').asPath}\n"
    }
}

tasks.named('processTestResources', ProcessResources) { task ->
    task.from(generatePluginUnderTestMetadataUnderTestTask.map { it.outputFile })
}
