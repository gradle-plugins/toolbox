import com.jfrog.bintray.gradle.tasks.BintrayUploadTask
import org.gradle.api.publish.maven.internal.artifact.FileBasedMavenArtifact
import static dev.gradleplugins.GradleRuntimeCompatibility.*

import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'groovy' // for Spock framework
    id 'maven-publish'
    id 'com.jfrog.bintray'
    id 'java-test-fixtures'
}

description = "Gradle TestKit fixtures for fast and efficient Gradle plugin development."

sourceSets {
    spockSupport {
        groovy {
            srcDir 'src/spock/groovy'
        }
    }
}

java {
    sourceCompatibility = minimumJavaVersionFor(minimumGradleVersion)
    targetCompatibility = minimumJavaVersionFor(minimumGradleVersion)
    withSourcesJar()
    withJavadocJar()
    registerFeature('spockSupport') {
        usingSourceSet(sourceSets.spockSupport)
        withSourcesJar()
        withJavadocJar()
    }
}

repositories {
    jcenter()
    gradlePluginPortal()
    gradlePluginDevelopment()
    maven { url = 'https://repo.nokeedev.net/snapshots' }
}

dependencies {
    // This is tricky as it's a API dependency but isn't published anywhere
    //   Let's put the burden on the user to declare that as well
    //   They should be declaring that dependency anyway as this library is not meant to be used outside of the Gradle plugin development plugins within Gradle runtime.
    compileOnly gradleTestKit()

    // TODO: this is required only if you are using rich console
    api 'net.rubygrapefruit:ansi-control-sequence-util:0.2'
    api 'org.hamcrest:hamcrest:2.2'
    api 'com.google.guava:guava:28.2-jre'

    // TODO: For convenience until we fully migrate
    api project(':gradle-runner-kit')
    api testFixtures(project(':gradle-runner-kit'))

    implementation 'org.apache.commons:commons-lang3:3.9' // For StringUtils
    implementation 'org.apache.ant:ant:1.9.13'
    implementation 'org.ow2.asm:asm:6.0'
    implementation 'commons-io:commons-io:2.6'
    implementation 'junit:junit:4.12'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation project(':gradle-fixtures-file-system')

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // TEST
    testImplementation platform('org.spockframework:spock-bom:1.2-groovy-2.5')
    testImplementation 'org.spockframework:spock-core'
    testImplementation gradleApi(minimumGradleVersion)
    testImplementation gradleTestKit() // Only for TestKit tests

    // SPOCK SUPPORT
    spockSupportApi testFixtures(project(':gradle-runner-kit'))
    spockSupportApi project(':gradle-fixtures')
    spockSupportApi project(':gradle-fixtures-source-elements')
    spockSupportApi "org.codehaus.groovy:groovy-all:${groovyVersionOf(minimumGradleVersion)}"
    spockSupportApi platform('org.spockframework:spock-bom:1.2-groovy-2.5')
    spockSupportApi 'org.spockframework:spock-core'
    spockSupportCompileOnly gradleApi(minimumGradleVersion) // Required because of the AbstractInstalledToolChainIntegrationSpec which is extremely tied to the internal of Gradle
    spockSupportCompileOnly gradleTestKit()
    spockSupportApi 'org.apache.commons:commons-lang3:3.10'
    spockSupportImplementation project(':gradle-runner-kit-api')
    spockSupportImplementation 'commons-io:commons-io:2.6'
    spockSupportImplementation 'org.jsoup:jsoup:1.13.1'

    spockSupportCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    spockSupportAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testFixturesApi testFixtures(project(':gradle-fixtures-file-system'))
    testFixturesApi testFixtures(project(':gradle-runner-kit'))
}

tasks.named('test', Test) {
    systemProperty('dev.gradleplugins.cwd', projectDir.absolutePath)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }
    repositories {
        maven {
            name = 'LocalRepository'
            url = file('../gradle-plugin-development/build/repository')
        }
    }
}

// Temporary workaround for https://github.com/bintray/gradle-bintray-plugin/issues/229
PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
project.tasks.withType(BintrayUploadTask).configureEach {
    doFirst {
        publishing.publications.withType(MavenPublication).each { publication ->
            File moduleFile = project.buildDir.toPath()
                    .resolve("publications/${publication.name}/module.json").toFile()

            if (moduleFile.exists()) {
                publication.artifact(new FileBasedMavenArtifact(moduleFile) {
                    @Override
                    protected String getDefaultExtension() {
                        return "module"
                    }
                })
            }
        }
    }
}

private String resolveProperty(Project project, String envVarKey, String projectPropKey) {
    Object propValue = System.getenv().get(envVarKey);

    if (propValue != null) {
        return propValue.toString();
    }

    propValue = project.findProperty(projectPropKey);
    if (propValue != null) {
        return propValue.toString();
    }

    return null;
}


afterEvaluate {
    bintray {
        user = resolveProperty(project, "BINTRAY_USER", "dev.gradleplugins.bintray.user")
        key = resolveProperty(project, "BINTRAY_KEY", "dev.gradleplugins.bintray.key")
        publications = publishing.publications.collect { it.name }

        publish = true
        override = System.getProperties().containsKey('force')

        pkg {
            repo = 'distributions'
            name = 'dev.gradleplugins:gradle-fixtures'
            desc = project.description
            userOrg = 'gradle-plugins'
            websiteUrl = 'https://nokee.dev'
            issueTrackerUrl = 'https://github.com/gradle-plugins/toolbox/issues'
            vcsUrl = 'https://github.com/gradle-plugins/toolbox.git'
            labels = ['gradle', 'gradle-api', 'gradle-plugins']
            licenses = ['Apache-2.0']
            publicDownloadNumbers = false

            version {
                released = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZZ").format(new Date())
                // TODO: Sign artifacts
                gpg {
                    sign = false
                    passphrase = resolveProperty(project, "GPG_PASSPHRASE", "dev.gradleplugins.bintray.gpgPassphrase")
                }
            }
        }
    }
}

tasks.register('release') {
    dependsOn('bintrayUpload')
}